module four_bit_adder(
	input [3:0] a,
	input [3:0] b,
	input cin,
	k,
	output[3:0] sum,
	output finalcarry
);
	 wire 
	 wire carry_0, carry_1, carry_2, carry_3;
    wire sum_0, sum_1, sum_2, sum_3;
	 
	 
	
	 full_adder adder1 (.a(a[0]), .b(b[0]), .carry_in(k), .sum(sum_0), .carry_out(carry_0));
    full_adder adder2 (.a(a[1]), .b(b[1]), .carry_in(carry_0), .sum(sum_1), .carry_out(carry_1));
    full_adder adder3 (.a(a[2]), .b(b[2]), .carry_in(carry_1), .sum(sum_2), .carry_out(carry_2));
    full_adder adder4 (.a(a[3]), .b(b[3]), .carry_in(carry_2), .sum(sum_3), .carry_out(carry_3));

    assign sum = {sum_3, sum_2, sum_1, sum_0}; 
    assign finalcarry = carry_3;

endmodule

module full_adder(input a, b, carry_in, output sum, carry_out);
    xor_gate and_inst (.in1(a), .in2(b), .in3(carry_in), .y(xor_out));
	 and_gate and_inst1 (.in1(a), .in2(b), .y(and_out_1));
	 and_gate and_inst2 (.in1(a), .in2(carry_in), .y(and_out_2));
	 and_gate and_inst3 (.in1(b), .in2(carry_in), .y(and_out_3));
	 or_gate or_inst (.in1(and_out_1), .in2(and_out_2), .in3(and_out_3), .y(or_out));
    assign sum = xor_out;
	 assign carry_out = or_out;

endmodule

module or_gate(
    input in1,
    input in2,
	 input in3,
    output y
);

	 assign y = in1 | in2 | in3;
endmodule

module xor_gate_2 (
    input in1,
    input in2,
    output y
);

	 assign y = in1 ^ in2;
endmodule

module xor_gate_3 (
    input in1,
    input in2,
	 input in3,
    output y
);

    assign y = in1 ^ in2 ^ in3;
endmodule

module and_gate (
    input in1,
    input in2,
    output y
);

	 assign y = in1 & in2;
endmodule